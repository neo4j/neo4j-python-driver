#!/usr/bin/env bash
set -e

ROOT=$(dirname "$0")/..
SRC="${ROOT}/src"
DIST="${ROOT}/dist"

function get_package
{
    cd "${SRC}"
    python -c "from neo4j._meta import package; print(package)"
    cd - > /dev/null
}

function set_package
{
    sed -i 's/^package = .*/package = "'$1'"/g' "${SRC}/neo4j/_meta.py"
}

function get_version
{
    cd "${SRC}"
    python -c "from neo4j._meta import version; print(version)"
    cd - > /dev/null
}

function set_version
{
    sed -i 's/^version = .*/version = "'$1'"/g' "${SRC}/neo4j/_meta.py"
}

function get_deprecated {
    cd "${SRC}"
    python -c "from neo4j._meta import deprecated_package; print(deprecated_package)"
    cd - > /dev/null
}

function set_deprecated {
    sed -i 's/^deprecated_package = .*/deprecated_package = '$1'/g' "${SRC}/neo4j/_meta.py"
}

# distribution normalization according to PEP 625 https://peps.python.org/pep-0625/
function normalize_dist_name
{
    echo $1 | sed 's/[._-]\+/_/g' | tr '[:upper:]' '[:lower:]'
}

function check_file
{
    FILE=$1
    echo -n "Checking file $(basename "${FILE}")... "
    if [ -f "${FILE}" ]
    then
        echo "OK"
    else
        echo "missing"
        STATUS=1
    fi
}

function set_metadata_and_setup
{
    PACKAGE="$1"; shift
    DEPRECATED="$1"; shift
    VERSION="$1"; shift

    cd "${ROOT}"

    # Capture original package metadata
    ORIGINAL_PACKAGE=$(get_package)
    ORIGINAL_VERSION=$(get_version)
    ORIGINAL_DEPRECATED=$(get_deprecated)
    echo "Source code originally configured for package ${ORIGINAL_PACKAGE}/${ORIGINAL_VERSION}/deprecated=${ORIGINAL_DEPRECATED}"
    echo "----------------------------------------"
    grep "package\s\+=" "${SRC}/neo4j/_meta.py"
    grep "version\s\+=" "${SRC}/neo4j/_meta.py"
    grep "deprecated_package\s\+=" "${SRC}/neo4j/_meta.py"
    echo "----------------------------------------"

    function cleanup() {
      # Reset to original package metadata
      set_package "${ORIGINAL_PACKAGE}"
      set_version "${ORIGINAL_VERSION}"
      set_deprecated "${ORIGINAL_DEPRECATED}"
      echo "Source code reconfigured back to original package ${ORIGINAL_PACKAGE}/${ORIGINAL_VERSION}/deprecated=${ORIGINAL_DEPRECATED}"
      echo "----------------------------------------"
      grep "package\s\+=" "${SRC}/neo4j/_meta.py"
      grep "version\s\+=" "${SRC}/neo4j/_meta.py"
      grep "deprecated_package\s\+=" "${SRC}/neo4j/_meta.py"
      echo "----------------------------------------"
    }
    trap cleanup EXIT

    # Temporarily override package metadata
    set_package "${PACKAGE}"
    set_version "${VERSION}"
    set_deprecated "${DEPRECATED}"
    echo "Source code reconfigured for package ${PACKAGE}/${VERSION}/deprecated=${DEPRECATED}"
    echo "----------------------------------------"
    grep "package\s\+=" "${SRC}/neo4j/_meta.py"
    grep "version\s\+=" "${SRC}/neo4j/_meta.py"
    grep "deprecated_package\s\+=" "${SRC}/neo4j/_meta.py"
    echo "----------------------------------------"

    # Create source distribution
    find . -name *.pyc -delete
    rm -rf "${SRC}/*.egg-info" 2> /dev/null
    python -m build $*
    check_file "${DIST}/$(normalize_dist_name $PACKAGE)-${VERSION}.tar.gz"

    trap - EXIT
    cleanup
}

function setup
{
    ARGS="$*"
    rm -rf ${DIST} 2> /dev/null
    set_metadata_and_setup "neo4j-driver" "True" ${ARGS}   # Legacy package; can be removed in 2.0
    set_metadata_and_setup "neo4j" "False" ${ARGS}
}
